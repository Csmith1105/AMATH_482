%% Homework 1

% Using ultrasound, data is obtained concerning the spatial 
% variations in a small area of the intestines where the marble 
% is suspected to be. Unfortunately, the internal fluid movement 
% through the intestines generates highly noisy data.
% Locate and compute the trajectory of the marble. 

clear; close all; clc;

% whos -file Testdata.mat
% returns the name, dimensions, size, and  
% data type of all variables in the MAT-file

load Testdata

L = 15; % spatial domain
n = 64; % Fourier modes, i.e. # of points in spatial range (2^6)

% 1x65 vector, includes upper & lower bounds of spatial range [-15,15]
% what is the purpose of this vector
x2 = linspace(-L,L,n+1); 

x = x2(1:n); % x-coord of each point in the discretized spatial range [-15,15)
y = x;  % y-coord of each point in the discretized spatial range [-15,15)
z = x;  % z-coord of each point in the discretized spatial range [-15,15)

% wavenumbers (eigenvalues)
% 1x64 vector [[0,6.4926], [-6.7021, -0.2094]]
% goes from 0 to highest, then from lowest to 0
% scaling is 2pi/L  (why is code this 2pi/2L?)
k= (2*pi/(2*L))*[0:(n/2-1) -n/2:-1];

% 1x64 vector [-6.7021, 6.4926]
% goes from lowest to highest
ks=fftshift(k);

% grid with spatial coordinates
[X,Y,Z] = meshgrid(x,y,z);
% grid with frequency values
[Kx,Ky,Kz] = meshgrid(ks,ks,ks);

%% 1
% Through averaging of the spectrum, determine the frequency signature 
%(center frequency) generated by the marble.

mean_fft = zeros(n,n,n); 

for j=1:20  % because we have 20 rows
   % Creates a 3D grid for each observation in Undata
   % this is the value of our function at each 
   % discretized point in space
    Un(:,:,:) = reshape(Undata(j,:),n,n,n);
   % uses the function values to transform to signal data
   % cumulative sum of signal values at each point in the grid
   mean_fft = mean_fft + fft(Un);
   % close all, isosurface(X,Y,Z,abs(Un),0.4)
   % axis([-20 20 -20 20 -20 20]), grid on, drawnow
   % pause(2)
end

% do we need fftshift here?
mean_fft = abs(mean_fft)/20;  

% vectorizes the matrix and get max value
max_signal = max(mean_fft(:));  

% find the indices of the maximum value in the grid
% (61, 18, 49)
[max_x, max_y, max_z] = ind2sub(size(mean_fft), find(mean_fft == max_signal));

% using the max coordinates, find frequencies associated with max signal
% (-3.1416, 5.8643, 3.3510) 
kx_center = Kx(max_x, max_y, max_z);  % pi?
ky_center = Ky(max_x, max_y, max_z);
kz_center = Kz(max_x, max_y, max_z);

%% 2
% Filter the data around the center frequency determined above in 
% order to denoise the data and determine the path of the marble. 
% (use plot3 to plot the path once you have it)

% filter=exp(-0.2*(k - k_0).^2); 
% where 0.2 is the tau value which is the width of our filter
% has something to do with the Heisenberg Uncertainty Principle?
% I think the wider our filter, the more accurate the 
% signal in the time domain will be


% for each Kx, Ky, Kz compute Gaussian formula, then meshgrid those results
% then multiply that meshgrid by each Fourier transformed signal grid
% and then do an isoplot of the results?

Kx_filter = exp(-0.2*(Kx(:,:,:) - kx_center).^2); 
Ky_filter = exp(-0.2*(Ky(:,:,:) - ky_center).^2); 
Kz_filter = exp(-0.2*(Kz(:,:,:) - kz_center).^2); 

for j=1:1  
   % Creates a 3D grid for each observation in Undata
   Un(:,:,:) = reshape(Undata(j,:),n,n,n);
   % transform the signal data
   Un_fft = fft(Un);  
   % filter the signal data in the frequency domain
   Un_fft_filtered = Un_fft(:,:,:).*Kx_filter(:,:,:) + 
   Un_fft(:,:,:).*Ky_filter(:,:,:) + 
   Un_fft(:,:,:).*Kz_filter(:,:,:)
   % plot the signal data in the frequency domain
   close all, isosurface(Kx,Ky,Kz,abs(Un_fft_filtered),0.4)
   axis([-10 10 -10 10 -10 10]), grid on, drawnow
   pause(5)
end


%% Tried to plot the ifftn but nothing shows up

for j=1:3  
   % Creates a 3D grid for each observation in Undata
   Un(:,:,:) = reshape(Undata(j,:),n,n,n);
   % transform the signal data
   Un_fft = fft(Un);  
   % filter the signal data in the frequency domain
   Un_fft_filtered = Un_fft(:,:,:).*Kx_filter(:,:,:) + Un_fft(:,:,:).*Ky_filter(:,:,:) + Un_fft(:,:,:).*Kz_filter(:,:,:)
   Un_filtered = ifftn(Un_fft_filtered);
   % plot the signal data in the spatial domain
   close all, isosurface(X,Y,Z,abs(Un_filtered),0.4)
   axis([-0.2 0.2 -0.2 0.2 -0.2 0.2]), grid on, drawnow
   pause(3)
end



%% 3
% Where should an intense acoustic wave be focused 
% to breakup the marble at the 20th data measurement?

